# -*- coding: utf-8 -*-
"""TRANSCRIPTOR WHISPER PARLA IA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vc31q7XgjeJGU-IjXWSVaQiWz3l9xkO3

## WHISPER IA PARA TRANSCRIPCI√ìN

<img src="https://i.ytimg.com/vi/BQErsh_Iff8/maxresdefault.jpg" width="400" height="200">

> Con esta herramienta podr√°n hacer las transcripciones, los formatos aceptables son: MP3, MP4 y el m√°s recomendable en caso de que tengan problemas con los dos anteriores ser√≠a el formato WAV.


> Cabe destacar que toma su tiempo para realizar la transcripci√≥n.



> Para ejecutar cada uno de lo pasos, darle √∫nicamente clik en el √≠cono de play ‚ñ∂ y esperar que finalice el proceso.



> Seguir cada uno de los pasos a continuaci√≥n:
"""

#@title 1-üíΩ Ejecutar esta opci√≥n para intalar la librer√≠a.
!pip install git+https://github.com/openai/whisper.git -q && pip install jiwer -q && pip install pydub -q && echo "Los paquetes whisper, jiwer y pydub se han instalado correctamente."

#@title 2-üíΩ Ejecutar esta opci√≥n para iniciar el entorno 
!pip install whisper -q && echo "El paquete whisper se ha instalado correctamente." || echo "Se ha producido un error durante la instalaci√≥n."

#@title 3-üéôÔ∏è **Transcribe ** [Elige el Audio de la Reuni√≥n]
import whisper
import datetime
from google.colab import files
from pydub import AudioSegment

# Crea el cuadro de di√°logo de selecci√≥n de archivos
uploaded = files.upload()

# Obtiene la ruta del archivo cargado
audio_file_path = list(uploaded.keys())[0]

# Convierte el archivo de audio a formato WAV
audio_file = AudioSegment.from_file(audio_file_path)
audio_file_path_wav = audio_file_path.split(".")[0] + ".wav"
audio_file.export(audio_file_path_wav, format="wav")

# Transcribe el audio usando el modelo Whisper
model = whisper.load_model("medium")
result = model.transcribe(audio_file_path_wav)

#@title 4-üìò Texto Plano y Texto por Minutos de la Transcripci√≥n

# Guarda el resultado de la transcripci√≥n en un archivo de texto plano
with open("resultado_transcripcion.txt", "w") as archivo_plano:
    archivo_plano.write(result["text"])
    print("El resultado de la transcripci√≥n se ha guardado en el archivo 'resultado_transcripcion.txt'")

# Divide el texto por minuto y lo guarda en un archivo
with open("resultado_transcripcion_por_minuto.txt", "w") as archivo_minuto:
    text = result["text"]
    duration = audio_file.duration_seconds
    for i in range(int(duration//60)+1):
        start_time = datetime.timedelta(minutes=i)
        end_time = datetime.timedelta(minutes=i+1)
        start_index = int(start_time.total_seconds()*len(text)/duration)
        end_index = int(end_time.total_seconds()*len(text)/duration)
        archivo_minuto.write(f"Minuto {i+1} ({start_time} - {end_time}): {text[start_index:end_index]}\n")
    print("El resultado de la transcripci√≥n por minuto se ha guardado en el archivo 'resultado_transcripcion_por_minuto.txt'")